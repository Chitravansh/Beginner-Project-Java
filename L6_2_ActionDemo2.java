import javax.swing.*;
import java.awt.*;
import java.awt.event.*;


/*By extending JFrame, the MyFrame class inherits all the properties and methods of the JFrame class, 
allowing you to use and customize the functionality provided by JFrame in your MyFrame class. 
You can then add additional functionality specific to MyFrame or override methods inherited from 
JFrame to customize their behavior for your specific needs. */

class Myframe extends JFrame implements ActionListener// used to over ride properties of JFrame inherited in Myframe and make it abstract
 {

    Container c;
    JButton btn1 = new JButton("Red");
    JButton btn2 = new JButton("Yellow");
    JButton btn3 = new JButton("Green");

    Myframe (){
        c = this.getContentPane();
        /*The 'this' keyword in the given code is used to 
        refer to the current instance of the MyFrame class. 
        It is used to call the getContentPane() method which is a method of the superclass JFrame. 
        The getContentPane() method is called on the current instance of the MyFrame class,
         which is referenced by the this keyword */
        c.setLayout(null);

        btn1.setBounds(100,100,100,50);
        btn2.setBounds(250,100,100,50);
        btn3.setBounds(400,100,100,50);
        
        c.add(btn1);
        c.add(btn2);
        c.add(btn3);

        btn1.addActionListener(this);
        btn2.addActionListener(this);
        btn3.addActionListener(this);

        /*addActionListener() is a method that takes an object that implements the ActionListener interface as its argument. 
        In this case, this is being passed as an argument, which means that the current object (i.e., the object that contains
         the btn1 object) is implementing the ActionListener interface and will handle any action events generated by the button. */

    }

    public void actionPerformed(ActionEvent e) /*public void actionPerformed(ActionEvent e) is 
    a method that is invoked when an action occurs.
     This method is part of the ActionListener interface in Java,which is
      used to handle events that occur when a user interacts with a GUI component, such as clicking a button. */
    {
      if(e.getSource()==btn1){ //Used  to determine what button was clicked
        c.setBackground(Color.RED);
      }
/*e is an instance of the EventObject class or one of its subclasses.
 It represents the event that occurred, such as a button click.
getSource() is a method that returns the object where the event originated.
btn1 is an instance of a button component, likely a JButton if you're using the Swing library. */
      if(e.getSource()==btn2){
        c.setBackground(Color.YELLOW);
      }

      if(e.getSource()==btn3){
        c.setBackground(Color.GREEN);
      }

      /* e.getSource(): This returns the object that generated the event. 
      In this case, it is the button that was clicked.
if (e.getSource() == btn1):
 This checks if the source of the event is the button btn1. 
If it is, then the following code block will be executed.
c.setBackground(Color.RED);: 
This sets the background color of a component c to red. 
The c component is likely a panel or a container that 
contains the button and other GUI components. */

    } 
}

public class L6_2_ActionDemo2 {
    public static  void main(String[] args) {
        Myframe f = new Myframe();// Create frame and set its properties
        f.setTitle("Action  Demo"); // Set the title of the window
        f.setSize(700,500);
        f.setLocation(100,100);
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.setVisible(true);


    }
}


